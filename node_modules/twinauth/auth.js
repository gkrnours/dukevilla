// base.js
var oauth = require("oauth")
var async = require("async")
var error = require("./error.js")

oauth = new oauth.OAuth2(
            process.env.cId, process.env.cKey,
            'https://twinoid.com/', 'oauth/auth', 'oauth/token', null
        )
oauth_req = ""
oauth_cb = null

module.exports = function(data, cb){
    oauth_req = data
    oauth_cb = cb
    return this
}

var parse = function parse(err, access_token, refresh_token, result){
    next = this.next
    // error management
    if(err) return next(new Error(err))
    if(result.error) return next(new error.OAuth(result.error))
    // success
    try {
    this.req.session.access = result
    this.req.session.token  = access_token
    this.req.session.refresh= refresh_token
    this.req.session.access.expire=new Date(Date.now()+result.expires_in*1000)
    } catch(e){}
    oauth.get(oauth_req, access_token, function(err, result, response){
                this.req.json = JSON.parse(result)
                next()
        }.bind(this)
    )
}

go = function go(req, res, next){
    req.session.from = req.headers['referer'] 
    url = oauth.getAuthorizeUrl({
        response_type:"code", state:"foobar", access_type: "online",
        redirect_uri: process.env.cHost+'/back'})
    // send the user fetch the authorisation
    res.redirect(url)
}
back = function back(req, res, next){
    oauth.getOAuthAccessToken(req.query.code, {
            grant_type: 'authorization_code',
            redirect_uri: process.env.cHost+'/back'
        }, parse.bind({req:req, res:res, next:next}))
}

refresh = function refresh(req, res, next){
    oauth.getOAuthAccessToken(req.session.refresh, {
            grant_type:'refresh_token' 
        }, parse.bind({req:req, res:res, next:next}))
}

